using JLD2, Test
using OrderedCollections

# Define test structs at top level
struct TestCommittedStruct
    x::Int64
    y::Float64
    name::String
end

@testset "Dataset Show Function Tests" begin
    cd(mktempdir()) do
        # Test files generated by generate_dataset_test_files.jl
        test_files = [
            "test_basic_types.jld2",
            "test_custom_structs.jld2",
            "test_complex_nested.jld2",
            "test_special_cases.jld2",
            "test_attributes_heavy.jld2"
        ]

        # Copy test files to temp directory
        test_dir = dirname(@__FILE__)
        for file in test_files
            src_path = joinpath(test_dir, file)
            if isfile(src_path)
                cp(src_path, file)
            else
                @warn "Test file $file not found, skipping"
                continue
            end

            @testset "Show output for $file" begin
                jldopen(file, "r") do f
                    @testset "Dataset display for each key" begin
                        for key in keys(f)
                            @testset "Dataset: $key" begin
                                # Get the dataset
                                dset = JLD2.get_dataset(f, key)

                                # Test that show doesn't throw errors
                                @test_nowarn show(IOBuffer(), MIME("text/plain"), dset)

                                # Test show output structure
                                io = IOBuffer()
                                show(io, MIME("text/plain"), dset)
                                output = String(take!(io))

                                # Basic structure tests
                                @test startswith(output, "┌─ Dataset:")
                                @test contains(output, "\"$key\"")
                                @test endswith(strip(output), "└─")

                                # Check for proper indentation using │
                                lines = split(output, '\n')
                                content_lines = [line for line in lines if contains(line, "│")]
                                if !isempty(content_lines)
                                    @test all(line -> startswith(line, "│"), content_lines)
                                end

                                # Test that we have datatype information for written datasets
                                if JLD2.iswritten(dset)
                                    @test contains(output, "datatype:")
                                    @test contains(output, "written structure:")

                                    # Test dataspace information
                                    if !isnothing(dset.dataspace)
                                        @test contains(output, "dataspace:")
                                    end

                                    # Test layout information
                                    if !isnothing(dset.layout)
                                        @test contains(output, "layout:")
                                    end
                                else
                                    @test contains(output, "(unwritten)")
                                end

                                # Debug output can be enabled by uncommenting:
                                # println("Dataset '$key' from $file:")
                                # println(output)
                                # println("=" ^ 60)
                            end
                        end
                    end
                end
            end
        end

        @testset "Attribute Display Tests" begin
            # Test attributes_heavy file specifically for attribute formatting
            if isfile("test_attributes_heavy.jld2")
                jldopen("test_attributes_heavy.jld2", "r") do f
                    for key in keys(f)
                        dset = JLD2.get_dataset(f, key)
                        attrs = JLD2.attributes(dset)

                        if !isempty(attrs)
                            @testset "Attributes for $key" begin
                                io = IOBuffer()
                                show(io, MIME("text/plain"), dset)
                                output = String(take!(io))

                                # Should contain "Attributes:" section
                                @test contains(output, "Attributes:")

                                # Each attribute should be displayed
                                for (attr_name, attr_value) in attrs
                                    @test contains(output, attr_name)
                                    # String values should be quoted
                                    if attr_value isa String
                                        @test contains(output, "\"$attr_value\"")
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end

        @testset "Committed Datatype Display" begin
            # Create a file with committed datatypes
            test_data = TestCommittedStruct(42, 3.14159, "committed_test")

            jldopen("committed_test.jld2", "w") do f
                f["committed_struct"] = test_data
            end

            # Test display of committed datatype
            jldopen("committed_test.jld2", "r") do f
                dset = JLD2.get_dataset(f, "committed_struct")

                io = IOBuffer()
                show(io, MIME("text/plain"), dset)
                output = String(take!(io))

                # Should contain datatype information
                @test contains(output, "datatype:")
                @test contains(output, "written structure:")

                # May contain committed datatype info if the type is committed
                dt = dset.datatype
                if dt isa JLD2.SharedDatatype && haskey(f.datatype_locations, dt.header_offset)
                    @test contains(output, "(committed)")
                    @test contains(output, "type name:")
                end

                # Uncomment for debug output:
                # println("Committed datatype display:")
                # println(output)
            end
        end

        @testset "Error Handling Tests" begin
            # Test with corrupted/incomplete dataset objects
            jldopen("test_basic_types.jld2", "r") do f
                dset = JLD2.get_dataset(f, "int64_val")

                # Create a copy and modify to test edge cases
                # Test with missing datatype
                incomplete_dset = JLD2.Dataset(
                    dset.parent,
                    dset.name,
                    dset.offset,
                    nothing,  # missing datatype
                    dset.dataspace,
                    dset.layout,
                    OrderedDict{String,Any}(),
                    dset.chunk,
                    dset.filters,
                    dset.header_chunk_info
                )

                @test_nowarn show(IOBuffer(), MIME("text/plain"), incomplete_dset)

                # Test with missing dataspace
                incomplete_dset2 = JLD2.Dataset(
                    dset.parent,
                    dset.name,
                    dset.offset,
                    dset.datatype,
                    nothing,  # missing dataspace
                    dset.layout,
                    OrderedDict{String,Any}(),
                    dset.chunk,
                    dset.filters,
                    dset.header_chunk_info
                )

                @test_nowarn show(IOBuffer(), MIME("text/plain"), incomplete_dset2)
            end
        end

        @testset "Special Display Cases" begin
            # Test unnamed datasets
            jldopen("unnamed_test.jld2", "w") do f
                dset = JLD2.create_dataset(f, nothing)  # unnamed dataset
                JLD2.write_dataset(dset, [1, 2, 3])

                io = IOBuffer()
                show(io, MIME("text/plain"), dset)
                output = String(take!(io))

                @test contains(output, "(unnamed)")
            end

            # Test unwritten dataset
            jldopen("unwritten_test.jld2", "w") do f
                dset = JLD2.create_dataset(f, "unwritten_data")
                JLD2.add_attribute(dset, "status", "not yet written")

                io = IOBuffer()
                show(io, MIME("text/plain"), dset)
                output = String(take!(io))

                @test contains(output, "(unwritten)")
                @test contains(output, "Attributes:")
                @test contains(output, "status")
            end

            # Test dataset with filters/compression
            if isfile("test_attributes_heavy.jld2")
                jldopen("test_attributes_heavy.jld2", "r") do f
                    if "compressed_data" in keys(f)
                        dset = JLD2.get_dataset(f, "compressed_data")
                        io = IOBuffer()
                        show(io, MIME("text/plain"), dset)
                        output = String(take!(io))

                        # Should show filter information
                        if !isnothing(dset.filters) && !isempty(dset.filters.filters)
                            @test contains(output, "filters:")
                        end
                    end
                end
            end
        end

        @testset "Output Format Consistency" begin
            # Test that all dataset displays follow consistent format
            jldopen("test_basic_types.jld2", "r") do f
                for key in keys(f)
                    dset = JLD2.get_dataset(f, key)

                    io = IOBuffer()
                    show(io, MIME("text/plain"), dset)
                    output = String(take!(io))

                    lines = split(output, '\n')

                    # First line should be the header
                    @test startswith(lines[1], "┌─ Dataset:")

                    # Last non-empty line should be the footer
                    non_empty_lines = [line for line in lines if !isempty(strip(line))]
                    @test non_empty_lines[end] == "└─"

                    # Content lines should use proper prefix
                    for line in lines[2:end-1]
                        if !isempty(strip(line)) && line != "└─"
                            @test startswith(line, "│")
                        end
                    end
                end
            end
        end
    end
end

# Allow running this test file independently
if abspath(PROGRAM_FILE) == @__FILE__
    # Copy test files to current directory for standalone running
    test_dir = dirname(@__FILE__)
    test_files = [
        "test_basic_types.jld2",
        "test_custom_structs.jld2",
        "test_complex_nested.jld2",
        "test_special_cases.jld2",
        "test_attributes_heavy.jld2"
    ]

    for file in test_files
        src_path = joinpath(test_dir, file)
        if isfile(src_path) && !isfile(file)
            cp(src_path, file)
        end
    end

    using Pkg
    Pkg.test(; test_args=["dataset_show_test"])
end